{"componentChunkName":"component---src-templates-blog-js","path":"/84. 柱状图中最大的矩形/","result":{"data":{"markdownRemark":{"html":"<h2 id=\"题目\" style=\"position:relative;\"><a href=\"#%E9%A2%98%E7%9B%AE\" aria-label=\"题目 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"#%E9%A2%98%E7%9B%AE\" aria-label=\"题目 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>题目</h2>\n<p>给定 n 个非负整数，用来表示柱状图中各个柱子的高度。每个柱子彼此相邻，且宽度为 1 。</p>\n<p>求在该柱状图中，能够勾勒出来的矩形的最大面积。\n<img src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/10/12/histogram.png\" alt=\"img\"></p>\n<p>以上是柱状图的示例，其中每个柱子的宽度为 1，给定的高度为 [2,1,5,6,2,3]。\n<img src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/10/12/histogram_area.png\" alt=\"img\">\n图中阴影部分为所能勾勒出的最大矩形面积，其面积为 10 个单位。</p>\n<p>示例:</p>\n<p>输入: [2,1,5,6,2,3]\n输出: 10</p>\n<p><a href=\"https://leetcode-cn.com/problems/largest-rectangle-in-histogram\">来源：力扣（LeetCode）</a></p>\n<h2 id=\"解题\" style=\"position:relative;\"><a href=\"#%E8%A7%A3%E9%A2%98\" aria-label=\"解题 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"#%E8%A7%A3%E9%A2%98\" aria-label=\"解题 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>解题</h2>\n<h3 id=\"dutlyuyu\" style=\"position:relative;\"><a href=\"#dutlyuyu\" aria-label=\"dutlyuyu permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"#dutlyuyu\" aria-label=\"dutlyuyu permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>dutLyuyu</h3>\n<deckgo-highlight-code js  terminal=\"carbon\" line-numbers=\"true\"  highlight-lines=\"\">\n          <code slot=\"code\">/**\n * @param {number[]} heights\n * @return {number}\n */\n\nconst IncreStack = {\n    val: [],\n    // 空栈栈顶和pop 结果返回undefined\n    top: function(){\n        return this.val[this.val.length - 1];\n    },\n    pop: function(){\n        return this.val.pop();\n    }\n};\n\nvar largestRectangleArea = function(heights) {\n    let re = 0;\n\n    // 矩阵后各添加一个height为0的矩阵\n    // increStrack 存的是index\n    // 但是单调栈维护 以heights为准\n    const increStack = Object.create(IncreStack);\n    heights.push(0);\n\n    const updateResult = (comingIndex) =&gt; {\n        const cur = increStack.pop();\n        // 栈里面前一个数、也就是下一个栈顶\n        let pre = increStack.top() === undefined ? - 1 : increStack.top();\n        let tmp = (comingIndex - pre - 1) * heights[cur];\n        re = re &gt; tmp ? re : tmp;\n        return pre;\n    };\n\n    increStack.val = [0];\n    for(let i = 1; i &lt; heights.length; i++){\n        let top = increStack.top();\n        while(heights[i] &lt; heights[top]){\n            top = updateResult(i);\n        }\n        if(top === -1 || heights[i] &gt; heights[top]){\n            increStack.val.push(i);\n        }else if(heights[i] === heights[top]){\n            // !!\n            increStack.val[increStack.val.length - 1] = i;\n        }\n    }\n    return re;\n};</code>\n        </deckgo-highlight-code>\n<h3 id=\"fangq78-超时\" style=\"position:relative;\"><a href=\"#fangq78-%E8%B6%85%E6%97%B6\" aria-label=\"fangq78 超时 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"#fangq78-%E8%B6%85%E6%97%B6\" aria-label=\"fangq78 超时 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>fangq78 超时</h3>\n<deckgo-highlight-code js  terminal=\"carbon\" line-numbers=\"true\"  highlight-lines=\"\">\n          <code slot=\"code\">class Solution {\n    public int largestRectangleArea(int[] heights) {\n        if (heights.length==0) {\n            return 0;\n        }\n        \n        int maxArea = 0;\n        for (int i=0; i&lt;heights.length; i++) {\n            int count = count(i,heights);\n            maxArea = count &gt; maxArea?count:maxArea;\n        }        \n        return maxArea;\n    }\n    \n    private int count(int idx,int[] heights) {\n        int base = heights[idx];\n        int sameCount = 0;\n        int result = 0;\n        for (int i=idx; i&lt;heights.length; i++) {\n            if (base &lt;= heights[i]) {\n                sameCount++;\n                continue;\n            }\n\n            int tmp = sameCount*base;\n            if (tmp&gt;(heights.length-idx)*heights[i]) {\n                break;\n            }\n            result = result &lt; tmp? tmp : result;\n            base = heights[i];\n            sameCount++;\n        }\n        result = result &lt; sameCount*base? sameCount*base : result;\n        return result;\n    }\n}</code>\n        </deckgo-highlight-code>\n<h3 id=\"slsay-超时\" style=\"position:relative;\"><a href=\"#slsay-%E8%B6%85%E6%97%B6\" aria-label=\"slsay 超时 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"#slsay-%E8%B6%85%E6%97%B6\" aria-label=\"slsay 超时 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>slsay 超时</h3>\n<deckgo-highlight-code js  terminal=\"carbon\" line-numbers=\"true\"  highlight-lines=\"\">\n          <code slot=\"code\">/**\n* @param {number[]} heights\n* @return {number}\n*/\nvar largestRectangleArea = function(heights) {\n let maxResult = 0;\n const result = [...heights];\n const len = heights.length;\n for (let i = 0; i &lt; len; i++) {\n   // left\n   for (let l = i - 1; l &gt;= 0 &amp;&amp; l &lt; i; l--) {\n       if (heights[l] &gt;= heights[i]) {\n           result[i] += heights[i];\n       } else {\n           break;\n       }\n   }\n\n   // right\n   for (let r = i + 1; r &lt; len; r++) {\n       if (heights[r] &gt;= heights[i]) {\n           result[i] += heights[i];\n       } else {\n           break;\n       }\n   }\n   maxResult = Math.max(maxResult, result[i]);\n }\n\n return maxResult;\n};</code>\n        </deckgo-highlight-code>\n<h3 id=\"xiaozhouzhou\" style=\"position:relative;\"><a href=\"#xiaozhouzhou\" aria-label=\"xiaozhouzhou permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"#xiaozhouzhou\" aria-label=\"xiaozhouzhou permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>xiaozhouzhou</h3>\n<deckgo-highlight-code js  terminal=\"carbon\" line-numbers=\"true\"  highlight-lines=\"\">\n          <code slot=\"code\">/**\n * @param {number[]} heights\n * @return {number}\n */\n\nvar handleStack  = function(heights,stack,height,heigthIndex,max) {\n    if(heights[stack[stack.length -1]] &gt; height) {\n        var popT = stack.pop();\n        max.value = max.value &lt; heights[popT] * (heigthIndex - stack[stack.length -1] -1) ? heights[popT] * (heigthIndex - stack[stack.length -1] -1) : max.value;\n        handleStack(heights,stack,height,heigthIndex,max);\n    }else {\n        stack.push(heigthIndex);\n    }\n} \nvar largestRectangleArea = function(heights) {\n    heights =  [0,...heights,0];\n    var stack = [];\n    var max = {value:0};\n    for(var index in heights) {\n        if(stack.length == 0) {\n            stack.push(index);\n        }else {\n            handleStack(heights,stack,heights[index],index,max);\n        }\n    }\n    return max.value;\n};</code>\n        </deckgo-highlight-code>","frontmatter":{"title":"84. 柱状图中最大的矩形","date":"2021-02-19","tag":"矩形","type":null},"tableOfContents":"<ul>\n<li>\n<p><a href=\"#%E9%A2%98%E7%9B%AE\">题目</a></p>\n</li>\n<li>\n<p><a href=\"#%E8%A7%A3%E9%A2%98\">解题</a></p>\n<ul>\n<li><a href=\"#dutlyuyu\">dutLyuyu</a></li>\n<li><a href=\"#fangq78-%E8%B6%85%E6%97%B6\">fangq78 超时</a></li>\n<li><a href=\"#slsay-%E8%B6%85%E6%97%B6\">slsay 超时</a></li>\n<li><a href=\"#xiaozhouzhou\">xiaozhouzhou</a></li>\n</ul>\n</li>\n</ul>","id":"feaf118e-7349-5dce-b38c-d2bc97a8a35d"}},"pageContext":{"slug":"/84. 柱状图中最大的矩形/"}},"staticQueryHashes":["3159585216","3810076356"]}