{"componentChunkName":"component---src-templates-blog-js","path":"/javascript/ES6基本用法2/","result":{"data":{"markdownRemark":{"html":"<h1 id=\"es6基本用法_2\" style=\"position:relative;\"><a href=\"#es6%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95_2\" aria-label=\"es6基本用法_2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"#es6%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95_2\" aria-label=\"es6基本用法_2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ES6基本用法_2</h1>\n<h2 id=\"promises\" style=\"position:relative;\"><a href=\"#promises\" aria-label=\"promises permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"#promises\" aria-label=\"promises permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Promises</h2>\n<h3 id=\"异步延迟加载函数\" style=\"position:relative;\"><a href=\"#%E5%BC%82%E6%AD%A5%E5%BB%B6%E8%BF%9F%E5%8A%A0%E8%BD%BD%E5%87%BD%E6%95%B0\" aria-label=\"异步延迟加载函数 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"#%E5%BC%82%E6%AD%A5%E5%BB%B6%E8%BF%9F%E5%8A%A0%E8%BD%BD%E5%87%BD%E6%95%B0\" aria-label=\"异步延迟加载函数 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>异步延迟加载函数</h3>\n<ul>\n<li>Promises 是异步编程的一种解决方案，比传统的解决方案——回调函数和事件——更合理和更强大。</li>\n<li>简单说就是一个容器，里面保存着某个未来才会结束的事件（通常是一个异步操作）的结果。</li>\n<li>从语法上说，Promise 是一个对象，从它可以获取异步操作的消息。</li>\n<li>Promise 提供统一的 API，各种异步操作都可以用同样的方法进行处理。</li>\n</ul>\n<p>Promise对象有以下两个特点。</p>\n<p>（1）对象的状态不受外界影响。Promise对象代表一个异步操作，有三种状态：pending（进行中）、fulfilled（已成功）和rejected（已失败）。只有异步操作的结果，可以决定当前是哪一种状态，任何其他操作都无法改变这个状态。这也是Promise这个名字的由来，它的英语意思就是“承诺”，表示其他手段无法改变。</p>\n<p>（2）一旦状态改变，就不会再变，任何时候都可以得到这个结果。Promise对象的状态改变，只有两种可能：从pending变为fulfilled和从pending变为rejected。只要这两种情况发生，状态就凝固了，不会再变了，会一直保持这个结果，这时就称为 resolved（已定型）。如果改变已经发生了，你再对Promise对象添加回调函数，也会立即得到这个结果。这与事件（Event）完全不同，事件的特点是，如果你错过了它，再去监听，是得不到结果的。</p>\n<p>有了Promise对象，就可以将异步操作以同步操作的流程表达出来，避免了层层嵌套的回调函数。此外，Promise对象提供统一的接口，使得控制异步操作更加容易。</p>\n<p>Promise也有一些缺点。</p>\n<ul>\n<li>首先，无法取消Promise，一旦新建它就会立即执行，无法中途取消。</li>\n<li>其次，如果不设置回调函数，Promise内部抛出的错误，不会反应到外部。</li>\n<li>第三，当处于pending状态时，无法得知目前进展到哪一个阶段（刚刚开始还是即将完成）。</li>\n</ul>\n<p>如果某些事件不断地反复发生，一般来说，使用 Stream 模式是比部署Promise更好的选择。</p>\n<deckgo-highlight-code js  terminal=\"carbon\" theme=\"vscode\" line-numbers=\"true\" editable=\"true\"  highlight-lines=\"\">\n          <code slot=\"code\">setTimeout(function(){\n  console.log(&#39;Yay!&#39;);\n}, 1000);</code>\n        </deckgo-highlight-code>\n<deckgo-highlight-code js  terminal=\"carbon\" theme=\"vscode\" line-numbers=\"true\" editable=\"true\"  highlight-lines=\"\">\n          <code slot=\"code\">//ES6 Promises重写\nvar wait1000 =  new Promise(function(resolve, reject) {\n  setTimeout(resolve, 1000);\n}).then(function() {\n  console.log(&#39;Yay!&#39;);\n});\nor\nvar wait1000 =  new Promise((resolve, reject)=&gt; {\n  setTimeout(resolve, 1000);\n}).then(()=&gt; {\n  console.log(&#39;Yay!&#39;);\n});</code>\n        </deckgo-highlight-code>\n<ul>\n<li>如果我们有更多的嵌套逻辑在setTimeout()回调函数中，我们将发现更多好处：</li>\n</ul>\n<deckgo-highlight-code js  terminal=\"carbon\" theme=\"vscode\" line-numbers=\"true\" editable=\"true\"  highlight-lines=\"\">\n          <code slot=\"code\">setTimeout(function(){\n  console.log(&#39;Yay!&#39;);\n  setTimeout(function(){\n    console.log(&#39;Wheeyee!&#39;);\n  }, 1000)\n}, 1000);</code>\n        </deckgo-highlight-code>\n<deckgo-highlight-code js  terminal=\"carbon\" theme=\"vscode\" line-numbers=\"true\" editable=\"true\"  highlight-lines=\"\">\n          <code slot=\"code\">//ES6 Promises重写\nvar wait1000 =  ()=&gt; new Promise((resolve, reject)=&gt; {\n    setTimeout(resolve, 1000)\n  }\n);\nwait1000()\n    .then(function() {\n        console.log(&#39;Yay!&#39;)\n        return wait1000()\n    })\n    .then(function() {\n        console.log(&#39;Wheeyee!&#39;)\n    });</code>\n        </deckgo-highlight-code>\n<ul>\n<li>更多详细的信息关于promise</li>\n<li><a href=\"http://es6.ruanyifeng.com/#docs/promise\">http://es6.ruanyifeng.com/#docs/promise</a></li>\n<li><a href=\"http://jamesknelson.com/grokking-es6-promises-the-four-functions-you-need-to-avoid-callback-hell/\">http://jamesknelson.com/grokking-es6-promises-the-four-functions-you-need-to-avoid-callback-hell/</a></li>\n</ul>\n<h2 id=\"classes\" style=\"position:relative;\"><a href=\"#classes\" aria-label=\"classes permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"#classes\" aria-label=\"classes permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Classes</h2>\n<h3 id=\"类\" style=\"position:relative;\"><a href=\"#%E7%B1%BB\" aria-label=\"类 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"#%E7%B1%BB\" aria-label=\"类 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>类</h3>\n<ul>\n<li>如果你喜欢面向对象编程（OOP），那么你将喜爱这个特性。</li>\n<li>类的创建和使用真是一件令人头疼的事情在过去的ES5中，因为没有一个关键字class.</li>\n<li>ES6没有用函数, 而是使用原型实现类。我们创建一个类baseModel ，并且在这个类里定义了一个constructor 和一个 getName()方法：</li>\n</ul>\n<deckgo-highlight-code js  terminal=\"carbon\" theme=\"vscode\" line-numbers=\"true\" editable=\"true\"  highlight-lines=\"\">\n          <code slot=\"code\">class baseModel {\n  constructor(options = {}, data = []) { // class constructor\n    this.name = &#39;Base&#39;;\n    this.url = &#39;http://azat.co/api&#39;;\n    this.data = data;\n    this.options = options;\n   }\n \n    getName() { // class method\n        console.log(`Class name: ${this.name}`);\n    }\n}</code>\n        </deckgo-highlight-code>\n<ul>\n<li>注意我们对options 和data使用了默认参数值。</li>\n<li>此外方法名也不需要加function关键字，而且冒号(：)也不需要了。</li>\n<li>另外一个大的区别就是你不需要分配属性this。</li>\n<li>现在设置一个属性的值，只需简单的在构造函数中分配。</li>\n</ul>\n<h3 id=\"继承\" style=\"position:relative;\"><a href=\"#%E7%BB%A7%E6%89%BF\" aria-label=\"继承 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"#%E7%BB%A7%E6%89%BF\" aria-label=\"继承 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>继承</h3>\n<ul>\n<li>AccountModel 从类baseModel 中而来</li>\n</ul>\n<deckgo-highlight-code js  terminal=\"carbon\" theme=\"vscode\" line-numbers=\"true\" editable=\"true\"  highlight-lines=\"\">\n          <code slot=\"code\">class AccountModel extends baseModel {\n    constructor(options, data) {\n//为了调用父级构造函数，可以毫不费力的唤起super()用参数传递：\n    super({private: true}, [&#39;32113123123&#39;, &#39;524214691&#39;]); //call the parent method with super\n    this.name = &#39;Account Model&#39;;\n    this.url +=&#39;/accounts/&#39;;\n   }\n\n   get accountsData() { //calculated attribute getter\n   // 设置accountData 属性\n   return this.data;\n   }\n}\n//调用 结果?\nlet accounts = new AccountModel(5);\naccounts.getName();\nconsole.log(&#39;Data is %s&#39;, accounts.accountsData); </code>\n        </deckgo-highlight-code>\n<h2 id=\"modules\" style=\"position:relative;\"><a href=\"#modules\" aria-label=\"modules permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"#modules\" aria-label=\"modules permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Modules</h2>\n<h3 id=\"模块\" style=\"position:relative;\"><a href=\"#%E6%A8%A1%E5%9D%97\" aria-label=\"模块 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"#%E6%A8%A1%E5%9D%97\" aria-label=\"模块 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>模块</h3>\n<ul>\n<li>在ES6以前JavaScript并不支持本地的模块。人们想出了AMD，RequireJS，CommonJS以及其它解决方法。</li>\n<li>现在ES6中可以用模块import 和export 操作了。</li>\n</ul>\n<deckgo-highlight-code js  terminal=\"carbon\" theme=\"vscode\" line-numbers=\"true\" editable=\"true\"  highlight-lines=\"\">\n          <code slot=\"code\">//在ES5中,module.js有port变量和getAccounts 方法:\nmodule.exports = {\n  port: 3000,\n  getAccounts: function() {\n    ...\n  }\n}\n\n//main.js需要依赖require(‘module’) 导入module.js：\nvar service = require(&#39;module.js&#39;);\nconsole.log(service.port); // 3000\n</code>\n        </deckgo-highlight-code>\n<ul>\n<li>在ES6中，我们将用export and import模块。</li>\n</ul>\n<deckgo-highlight-code js  terminal=\"carbon\" theme=\"vscode\" line-numbers=\"true\" editable=\"true\"  highlight-lines=\"\">\n          <code slot=\"code\">//用ES6 写的module.js文件库：\nexport var port = 3000;\nexport function getAccounts(url) {\n  ...\n}\n\n//导入到文件main.js中，我们需用import {name} from ‘my-module’语法\nimport {port, getAccounts} from &#39;module&#39;;\nconsole.log(port); // 3000\n\n//或者我们可以在main.js中把整个模块导入, 并命名为 service：\nimport * as service from &#39;module&#39;;\nconsole.log(service.port); // 3000</code>\n        </deckgo-highlight-code>\n<h2 id=\"es7\" style=\"position:relative;\"><a href=\"#es7\" aria-label=\"es7 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"#es7\" aria-label=\"es7 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ES7</h2>\n<h3 id=\"arrayprototypeincludes\" style=\"position:relative;\"><a href=\"#arrayprototypeincludes\" aria-label=\"arrayprototypeincludes permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"#arrayprototypeincludes\" aria-label=\"arrayprototypeincludes permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Array.prototype.includes</h3>\n<p>替代indexOf，用来检查数组中是否存在值</p>\n<deckgo-highlight-code js  terminal=\"carbon\" theme=\"vscode\" line-numbers=\"true\" editable=\"true\"  highlight-lines=\"\">\n          <code slot=\"code\">let arr = [&#39;react&#39;, &#39;angular&#39;, &#39;vue&#39;];\n// WRONG \nif (arr.indexOf(&#39;react&#39;)) {       // 0 -&gt; evaluates to false, definitely as we expected \n    console.log(&#39;Can use React&#39;); // this line would never be executed \n}\n \n// Correct \nif (arr.indexOf(&#39;react&#39;) !== -1) { \nconsole.log(&#39;Can use React&#39;); \n}\n</code>\n        </deckgo-highlight-code>\n<p>在ES7中使用includes代码如下:</p>\n<deckgo-highlight-code js  terminal=\"carbon\" theme=\"vscode\" line-numbers=\"true\" editable=\"true\"  highlight-lines=\"\">\n          <code slot=\"code\">let arr = [&#39;react&#39;, &#39;angular&#39;, &#39;vue&#39;]\n\n// Correct\nif (arr.includes(&#39;react&#39;)) {\n  console.log(&#39;Can use React&#39;)\n}\n</code>\n        </deckgo-highlight-code>\n<p>还能在字符串中使用includes:</p>\n<deckgo-highlight-code js  terminal=\"carbon\" theme=\"vscode\" line-numbers=\"true\" editable=\"true\"  highlight-lines=\"\">\n          <code slot=\"code\">let str = &#39;React Quickly&#39;\n\n// Correct\nif (str.toLowerCase().includes(&#39;react&#39;)) {  // true\n  console.log(&#39;Found &quot;react&quot;&#39;)  \n}</code>\n        </deckgo-highlight-code>\n<p>许多JavaScript库已经实现includes或类似功能contains</p>\n<ol>\n<li>jQuery: $.inArray</li>\n<li>Underscore.js: _.contains</li>\n<li>Lodash: _.includes</li>\n</ol>\n<p>Array.prototype.includes特点:</p>\n<ul>\n<li>增强了可读性语义化，实际上给开发者返回布尔值，而不是匹配的位置。</li>\n<li>includes也可以在NaN(非数字)使用。</li>\n<li>includes第二可选参数fromIndex，这对于优化是有好处的，因为它允许从特定位置开始寻找匹配。</li>\n</ul>\n<deckgo-highlight-code js  terminal=\"carbon\" theme=\"vscode\" line-numbers=\"true\" editable=\"true\"  highlight-lines=\"\">\n          <code slot=\"code\">console.log([1, 2, 3].includes(2)) // === true) \nconsole.log([1, 2, 3].includes(4)) // === false) \nconsole.log([1, 2, NaN].includes(NaN)) // === true) \nconsole.log([1, 2, -0].includes(+0)) // === true) \nconsole.log([1, 2, +0].includes(-0)) // === true) \nconsole.log([&#39;a&#39;, &#39;b&#39;, &#39;c&#39;].includes(&#39;a&#39;)) // === true) \nconsole.log([&#39;a&#39;, &#39;b&#39;, &#39;c&#39;].includes(&#39;a&#39;, 1)) // === false)</code>\n        </deckgo-highlight-code>\n<h3 id=\"exponentiation-operator求幂运算\" style=\"position:relative;\"><a href=\"#exponentiation-operator%E6%B1%82%E5%B9%82%E8%BF%90%E7%AE%97\" aria-label=\"exponentiation operator求幂运算 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"#exponentiation-operator%E6%B1%82%E5%B9%82%E8%BF%90%E7%AE%97\" aria-label=\"exponentiation operator求幂运算 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Exponentiation Operator(求幂运算)</h3>\n<ul>\n<li>求幂运算大多数是为开发者做一些数学计算，对于3D，VR，SVG还有数据可视化非常有用。</li>\n<li>在ES6或者早些版本，你不得不创建一个循环，创建一个递归函数或者使用Math.pow,</li>\n<li>如果你忘记了什么是指数,当你有相同数字（基数）自相相乘多次（指数）。例如，7的3次方是7<em>7</em>7</li>\n</ul>\n<deckgo-highlight-code js  terminal=\"carbon\" theme=\"vscode\" line-numbers=\"true\" editable=\"true\"  highlight-lines=\"\">\n          <code slot=\"code\">//在ES6，你能使用Math.pow创建一个短的递归箭头函数\ncalculateExponent = (base, exponent) =&gt; base*((--exponent&gt;1)?calculateExponent(base, exponent):base) console.log(calculateExponent(7,12) === Math.pow(7,12)) // true \nconsole.log(calculateExponent(2,7) === Math.pow(2,7)) // true\n</code>\n        </deckgo-highlight-code>\n<p>在ES7，以数学向导的开发者可以使用更短的语法:</p>\n<deckgo-highlight-code js  terminal=\"carbon\" theme=\"vscode\" line-numbers=\"true\" editable=\"true\"  highlight-lines=\"\">\n          <code slot=\"code\">let a = 7 ** 12\nlet b = 2 ** 7\nconsole.log(a === Math.pow(7,12)) // true\nconsole.log(b === Math.pow(2,7)) // true</code>\n        </deckgo-highlight-code>\n<p>开发者还可以操作结果:</p>\n<deckgo-highlight-code js  terminal=\"carbon\" theme=\"vscode\" line-numbers=\"true\" editable=\"true\"  highlight-lines=\"\">\n          <code slot=\"code\">let a = 7\na **= 12\nlet b = 2\nb **= 7\nconsole.log(a === Math.pow(7,12)) // true\nconsole.log(b === Math.pow(2,7)) // true</code>\n        </deckgo-highlight-code>\n<p>许多ES新特性是从其他语言模仿而来的。指数运算符在其他语言的存在形式：</p>\n<ul>\n<li>Python: x ** y</li>\n<li>CoffeeScript: x ** y</li>\n<li>Ruby: x ** y</li>\n<li>Perl: x ** y</li>\n</ul>\n<h2 id=\"es8\" style=\"position:relative;\"><a href=\"#es8\" aria-label=\"es8 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"#es8\" aria-label=\"es8 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ES8</h2>\n<h3 id=\"字符填充函数padstart-和-padend\" style=\"position:relative;\"><a href=\"#%E5%AD%97%E7%AC%A6%E5%A1%AB%E5%85%85%E5%87%BD%E6%95%B0padstart-%E5%92%8C-padend\" aria-label=\"字符填充函数padstart 和 padend permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"#%E5%AD%97%E7%AC%A6%E5%A1%AB%E5%85%85%E5%87%BD%E6%95%B0padstart-%E5%92%8C-padend\" aria-label=\"字符填充函数padstart 和 padend permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>字符填充函数padStart 和 padEnd</h3>\n<ul>\n<li>该函数能够通过填充字符串的首部或者尾部来保证字符串达到固定的长度；</li>\n<li>开发者可以指定填充的字符串或者使用默认的空格;</li>\n</ul>\n<p>函数的声明如下：</p>\n<deckgo-highlight-code js  terminal=\"carbon\" theme=\"vscode\" line-numbers=\"true\" editable=\"true\"  highlight-lines=\"\">\n          <code slot=\"code\">//函数的首个参数为目标长度，即最终生成的字符串长度；\n//第二个参数即是指定的填充字符串\nstr.padStart(targetLength [, padString])    // 在开始部位填充\nstr.padEnd(targetLength [, padString])      // 从字符串的尾端右边开始填充</code>\n        </deckgo-highlight-code>\n<p>使用空格创建列：</p>\n<deckgo-highlight-code js  terminal=\"carbon\" theme=\"vscode\" line-numbers=\"true\" editable=\"true\"  highlight-lines=\"\">\n          <code slot=\"code\">console.log(&#39;react&#39;.padStart(10).length)         // &quot;       react&quot; is 10\nconsole.log(&#39;backbone&#39;.padStart(10).length)         // &quot;  backbone&quot; is 10</code>\n        </deckgo-highlight-code>\n<p>它对于财务方面非常有用：</p>\n<deckgo-highlight-code js  terminal=\"carbon\" theme=\"vscode\" line-numbers=\"true\" editable=\"true\"  highlight-lines=\"\">\n          <code slot=\"code\">console.log(&#39;0.00&#39;.padStart(20))            \nconsole.log(&#39;10,000.00&#39;.padStart(20))    \nconsole.log(&#39;250,000.00&#39;.padStart(20))    </code>\n        </deckgo-highlight-code>\n<p>这结果作为一个会计总账格式非常漂亮：</p>\n<deckgo-highlight-code js  terminal=\"carbon\" theme=\"vscode\" line-numbers=\"true\" editable=\"true\"  highlight-lines=\"\">\n          <code slot=\"code\">                0.00\n           10,000.00\n          250,000.00</code>\n        </deckgo-highlight-code>\n<deckgo-highlight-code js  terminal=\"carbon\" theme=\"vscode\" line-numbers=\"true\" editable=\"true\"  highlight-lines=\"\">\n          <code slot=\"code\">// 其他字符填充\nconsole.log(&#39;react&#39;.padStart(10, &#39;_&#39;))         // &quot;_____react&quot;\nconsole.log(&#39;backbone&#39;.padStart(10, &#39;*&#39;))         // &quot;**backbone&quot;\n\n//第二个参数，你能实际上用一个任何长度的字符串。\nconsole.log(&#39;react&#39;.padEnd(10, &#39;:-)&#39;))         // &quot;react:-):-&quot; is 10 \nconsole.log(&#39;backbone&#39;.padEnd(10, &#39;*&#39;))         // &quot;backbone**&quot; is 10</code>\n        </deckgo-highlight-code>\n<h3 id=\"对象值遍历objectvaluesobjectentries\" style=\"position:relative;\"><a href=\"#%E5%AF%B9%E8%B1%A1%E5%80%BC%E9%81%8D%E5%8E%86objectvaluesobjectentries\" aria-label=\"对象值遍历objectvaluesobjectentries permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"#%E5%AF%B9%E8%B1%A1%E5%80%BC%E9%81%8D%E5%8E%86objectvaluesobjectentries\" aria-label=\"对象值遍历objectvaluesobjectentries permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>对象值遍历Object.values/Object.entries</h3>\n<ul>\n<li>Object.values 函数会返回指定对象的可迭代的属性值数组，数组中值顺序与 for-in 循环保持一致</li>\n<li>Object.values 和Object.keys类似，返回数组类型，其序号和Object.keys序号对应</li>\n</ul>\n<p>函数的声明为：</p>\n<deckgo-highlight-code js  terminal=\"carbon\" theme=\"vscode\" line-numbers=\"true\" editable=\"true\"  highlight-lines=\"\">\n          <code slot=\"code\">Object.values(obj)  //参数obj可以为某个对象或者数组（数组可以看做键为下标的对象）</code>\n        </deckgo-highlight-code>\n<deckgo-highlight-code js  terminal=\"carbon\" theme=\"vscode\" line-numbers=\"true\" editable=\"true\"  highlight-lines=\"\">\n          <code slot=\"code\">const obj = { x: &#39;xxx&#39;, y: 1 };\nObject.values(obj);             // [&#39;xxx&#39;, 1]\n\nconst obj = [&#39;e&#39;, &#39;s&#39;, &#39;8&#39;];    // same as { 0: &#39;e&#39;, 1: &#39;s&#39;, 2: &#39;8&#39; };\nObject.values(obj);             // [&#39;e&#39;, &#39;s&#39;, &#39;8&#39;]\n\n// when we use numeric keys, the values returned in a numerical \n// order according to the keys\nconst obj = { 10: &#39;xxx&#39;, 1: &#39;yyy&#39;, 3: &#39;zzz&#39; };\nObject.values(obj);            // [&#39;yyy&#39;, &#39;zzz&#39;, &#39;xxx&#39;]\nObject.values(&#39;es8&#39;);          // [&#39;e&#39;, &#39;s&#39;, &#39;8&#39;]</code>\n        </deckgo-highlight-code>\n<ul>\n<li>Object.entries 方法则会将某个对象的可迭代属性与值按照二维数组的方式返回</li>\n<li>key-value对数组（作为一个数组），他们（key-value）分别以数组存放数组中。</li>\n<li>Object.entries 数组中顺序与 Object.values 保持一致</li>\n</ul>\n<deckgo-highlight-code js  terminal=\"carbon\" theme=\"vscode\" line-numbers=\"true\" editable=\"true\"  highlight-lines=\"\">\n          <code slot=\"code\">const obj = { x: &#39;xxx&#39;, y: 1 };\nObject.entries(obj); // [[&#39;x&#39;, &#39;xxx&#39;], [&#39;y&#39;, 1]]\n\nconst obj = [&#39;e&#39;, &#39;s&#39;, &#39;8&#39;];\nObject.entries(obj); // [[&#39;0&#39;, &#39;e&#39;], [&#39;1&#39;, &#39;s&#39;], [&#39;2&#39;, &#39;8&#39;]]\n\nconst obj = { 10: &#39;xxx&#39;, 1: &#39;yyy&#39;, 3: &#39;zzz&#39; };\nObject.entries(obj); // [[&#39;1&#39;, &#39;yyy&#39;], [&#39;3&#39;, &#39;zzz&#39;], [&#39;10&#39;: &#39;xxx&#39;]]\nObject.entries(&#39;es8&#39;); // [[&#39;0&#39;, &#39;e&#39;], [&#39;1&#39;, &#39;s&#39;], [&#39;2&#39;, &#39;8&#39;]]</code>\n        </deckgo-highlight-code>\n<p>猜一猜，我们同样使用ES6for/of（毕竟全部都是数组）遍历Object.entries返回来的结果值。</p>\n<deckgo-highlight-code js  terminal=\"carbon\" theme=\"vscode\" line-numbers=\"true\" editable=\"true\"  highlight-lines=\"\">\n          <code slot=\"code\">let obj = {a: 1, b: 2, c: 3}\nfor (let [key, value] of Object.entries(obj)) {\n  console.log(`${key} is ${value}`)\n}\n//结果?</code>\n        </deckgo-highlight-code>\n<h3 id=\"对象的属性描述符获取\" style=\"position:relative;\"><a href=\"#%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%B1%9E%E6%80%A7%E6%8F%8F%E8%BF%B0%E7%AC%A6%E8%8E%B7%E5%8F%96\" aria-label=\"对象的属性描述符获取 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"#%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%B1%9E%E6%80%A7%E6%8F%8F%E8%BF%B0%E7%AC%A6%E8%8E%B7%E5%8F%96\" aria-label=\"对象的属性描述符获取 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>对象的属性描述符获取</h3>\n<p><strong>Object.getOwnPropertyDescriptors</strong></p>\n<ul>\n<li>getOwnPropertyDescriptors 函数会返回指定对象的某个指定属性的描述符；</li>\n<li>该属性必须是对象自己定义而不是继承自原型链</li>\n</ul>\n<p>函数的声明为：</p>\n<deckgo-highlight-code js  terminal=\"carbon\" theme=\"vscode\" line-numbers=\"true\" editable=\"true\"  highlight-lines=\"\">\n          <code slot=\"code\">Object.getOwnPropertyDescriptor(obj, prop)</code>\n        </deckgo-highlight-code>\n<p>obj 即为源对象，而 prop 即为需要查看的属性名；结果中包含的键可能有 configurable、enumerable、writable、get、set 以及 value。</p>\n<deckgo-highlight-code js  terminal=\"carbon\" theme=\"vscode\" line-numbers=\"true\" editable=\"true\"  highlight-lines=\"\">\n          <code slot=\"code\">let azatsBooks = { \n  books: [&#39;React Quickly&#39;], \n  get latest () { \n    let numberOfBooks = this.books.length \n    if (numberOfBooks == 0) return undefined \n    return this.books[numberOfBooks - 1] \n  } \n}</code>\n        </deckgo-highlight-code>\n<p>数据描述符books由Object.getOwnPropertyDescriptor(azatsBooks, ‘books’)产生结果如下：</p>\n<deckgo-highlight-code js  terminal=\"carbon\" theme=\"vscode\" line-numbers=\"true\" editable=\"true\"  highlight-lines=\"\">\n          <code slot=\"code\">Object\n    configurable: true\n    enumerable: true\n    value: Array[1]\n    writable: true\n    __proto__: Object</code>\n        </deckgo-highlight-code>\n<p>Object.getOwnPropertyDescriptor(azatsBooks, ‘latest’)将会展现latest的描述符，这个latest（get）存取器描述符展现如下：</p>\n<deckgo-highlight-code js  terminal=\"carbon\" theme=\"vscode\" line-numbers=\"true\" editable=\"true\"  highlight-lines=\"\">\n          <code slot=\"code\">Object\n    configurable: true\n    numerable: true\n    get: latest()\n    set: undefined\n    __proto__: Object</code>\n        </deckgo-highlight-code>\n<p>现在我们调用新方法获取所有的描述符：</p>\n<deckgo-highlight-code js  terminal=\"carbon\" theme=\"vscode\" line-numbers=\"true\" editable=\"true\"  highlight-lines=\"\">\n          <code slot=\"code\">console.log(Object.getOwnPropertyDescriptors(azatsBooks))</code>\n        </deckgo-highlight-code>\n<p>它会给出这个对象两个描述符books和latest：</p>\n<deckgo-highlight-code js  terminal=\"carbon\" theme=\"vscode\" line-numbers=\"true\" editable=\"true\"  highlight-lines=\"\">\n          <code slot=\"code\">Object \n  books: Object \n    configurable: true \n    enumerable: true \n    value: Array[1] \n    writable: true \n    __proto__: Object \n  latest: Object \n    configurable: true \n    enumerable: true \n    get: latest() \n    set: undefined \n    __proto__: Object \n  __proto__: Object\n</code>\n        </deckgo-highlight-code>\n<h3 id=\"函数参数列表和调用中的尾逗号\" style=\"position:relative;\"><a href=\"#%E5%87%BD%E6%95%B0%E5%8F%82%E6%95%B0%E5%88%97%E8%A1%A8%E5%92%8C%E8%B0%83%E7%94%A8%E4%B8%AD%E7%9A%84%E5%B0%BE%E9%80%97%E5%8F%B7\" aria-label=\"函数参数列表和调用中的尾逗号 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"#%E5%87%BD%E6%95%B0%E5%8F%82%E6%95%B0%E5%88%97%E8%A1%A8%E5%92%8C%E8%B0%83%E7%94%A8%E4%B8%AD%E7%9A%84%E5%B0%BE%E9%80%97%E5%8F%B7\" aria-label=\"函数参数列表和调用中的尾逗号 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>函数参数列表和调用中的尾逗号</h3>\n<ul>\n<li>尾逗号在函数定义中只是一个纯粹语法变化</li>\n<li>该特性允许我们在定义或者调用函数时添加尾部逗号而不报错：</li>\n</ul>\n<p>在ES5中，将会非法语法，在函数参数后面应该是没有逗号的：</p>\n<deckgo-highlight-code js  terminal=\"carbon\" theme=\"vscode\" line-numbers=\"true\" editable=\"true\"  highlight-lines=\"\">\n          <code slot=\"code\">var f = function(a,\n  b,\n  c,\n  d) { // NO COMMA!\n  // ...\n  console.log(d)\n}\nf(1,2,3,&#39;this&#39;)</code>\n        </deckgo-highlight-code>\n<p>在ES8中，这种尾逗号是没有问题的：</p>\n<deckgo-highlight-code js  terminal=\"carbon\" theme=\"vscode\" line-numbers=\"true\" editable=\"true\"  highlight-lines=\"\">\n          <code slot=\"code\">var f = function(a,\n  b,\n  c,\n  d,\n) { // COMMA? OK!\n  // ...\n  console.log(d)\n}\nf(1,2,3,&#39;this&#39;)</code>\n        </deckgo-highlight-code>\n<p>现在，函数中尾逗号是向数组（ES3）中和字面量对象（ES5）中尾逗号看齐。</p>\n<deckgo-highlight-code js  terminal=\"carbon\" theme=\"vscode\" line-numbers=\"true\" editable=\"true\"  highlight-lines=\"\">\n          <code slot=\"code\">var arr = [1,  // Length == 3\n  2,\n  3,\n]  // &lt;--- ok\nlet obj = {a: 1,  // Only 3 properties\n  b: 2,\n  c: 3,\n}  // &lt;--- ok</code>\n        </deckgo-highlight-code>\n<p>现在你可以到处使用逗号，甚至最后参数都可以啦。</p>\n<h3 id=\"异步函数\" style=\"position:relative;\"><a href=\"#%E5%BC%82%E6%AD%A5%E5%87%BD%E6%95%B0\" aria-label=\"异步函数 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"#%E5%BC%82%E6%AD%A5%E5%87%BD%E6%95%B0\" aria-label=\"异步函数 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>异步函数</h3>\n<ul>\n<li>异步函数（或者async/await）特性操作是Promise最重要的功能。</li>\n<li>在ES8，异步函数是那么给力。开发者定义一个asyc函数里面不包含或者包含await 基于Promise异步操作。</li>\n<li>在这引擎之下一个异步函数返回一个Promise，无论如何你在任何地方不会看到这样的一个词</li>\n</ul>\n<p>在ES6中我们可以使用Promise，Axios库向GraphQL服务器发送一个请求：</p>\n<deckgo-highlight-code js  terminal=\"carbon\" theme=\"vscode\" line-numbers=\"true\" editable=\"true\"  highlight-lines=\"\">\n          <code slot=\"code\">axios.get(`/q?query=${query}`) \n  .then(response =&gt; response.data) \n  .then(data =&gt; { \n    this.props.processfetchedData(data) // Defined somewhere else \n  }) \n  .catch(error =&gt; console.log(error))\n</code>\n        </deckgo-highlight-code>\n<p>任何一个Promise库都能兼容新的异步函数，我们可以使用同步try/catch做错误处理。</p>\n<deckgo-highlight-code js  terminal=\"carbon\" theme=\"vscode\" line-numbers=\"true\" editable=\"true\"  highlight-lines=\"\">\n          <code slot=\"code\">async fetchData(url) =&gt; { \n  try { \n    const response = await axios.get(`/q?query=${query}`);\n    const data = response.data; \n    this.props.processfetchedData(data); \n  } catch (error) { \n    console.log(error); \n  } \n}\n</code>\n        </deckgo-highlight-code>\n<p>异步函数返回一个Promise，所以我们像下面可以继续执行流程:</p>\n<deckgo-highlight-code js  terminal=\"carbon\" theme=\"vscode\" line-numbers=\"true\" editable=\"true\"  highlight-lines=\"\">\n          <code slot=\"code\">async fetchData(query) =&gt; { \n  try { \n    const response = await axios.get(`/q?query=${query}`) \n    const data = response.data \n    return data \n  } catch (error) { \n    console.log(error) \n  } \n} \nfetchData(query).then(data =&gt; { \n  this.props.processfetchedData(data) \n})\n</code>\n        </deckgo-highlight-code>\n<deckgo-highlight-code js  terminal=\"carbon\" theme=\"vscode\" line-numbers=\"true\" editable=\"true\"  highlight-lines=\"\">\n          <code slot=\"code\">let axios = { // mocks \n  get: function(x) { \n  return new Promise(resolve =&gt; { \n    setTimeout(() =&gt; { \n      resolve({data: x}) \n    }, 2000) \n  }) \n}} \nlet query = &#39;mangos&#39; \nasync function fetchData(query) { \n  try { \n    const response = await axios.get(`/q?query=${query}`) \n    const data = response.data \n    return data \n  } catch (error) { \n    console.log(error) \n  } \n} \nfetchData(query).then(data =&gt; { \n  console.log(data) // Got data 2s later... Can use data! \n})\n</code>\n        </deckgo-highlight-code>\n<p>有了 async/await,我们的代码执行异步看起来像执行同步一样。</p>","frontmatter":{"title":"ES6基本用法(二)","date":"2018-06-28","tag":"ES6,基本语法,异步,Promises","type":null,"author":null},"tableOfContents":"<ul>\n<li>\n<p><a href=\"#es6%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95_2\">ES6基本用法_2</a></p>\n<ul>\n<li>\n<p><a href=\"#promises\">Promises</a></p>\n<ul>\n<li><a href=\"#%E5%BC%82%E6%AD%A5%E5%BB%B6%E8%BF%9F%E5%8A%A0%E8%BD%BD%E5%87%BD%E6%95%B0\">异步延迟加载函数</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#classes\">Classes</a></p>\n<ul>\n<li><a href=\"#%E7%B1%BB\">类</a></li>\n<li><a href=\"#%E7%BB%A7%E6%89%BF\">继承</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#modules\">Modules</a></p>\n<ul>\n<li><a href=\"#%E6%A8%A1%E5%9D%97\">模块</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#es7\">ES7</a></p>\n<ul>\n<li><a href=\"#arrayprototypeincludes\">Array.prototype.includes</a></li>\n<li><a href=\"#exponentiation-operator%E6%B1%82%E5%B9%82%E8%BF%90%E7%AE%97\">Exponentiation Operator(求幂运算)</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#es8\">ES8</a></p>\n<ul>\n<li><a href=\"#%E5%AD%97%E7%AC%A6%E5%A1%AB%E5%85%85%E5%87%BD%E6%95%B0padstart-%E5%92%8C-padend\">字符填充函数padStart 和 padEnd</a></li>\n<li><a href=\"#%E5%AF%B9%E8%B1%A1%E5%80%BC%E9%81%8D%E5%8E%86objectvaluesobjectentries\">对象值遍历Object.values/Object.entries</a></li>\n<li><a href=\"#%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%B1%9E%E6%80%A7%E6%8F%8F%E8%BF%B0%E7%AC%A6%E8%8E%B7%E5%8F%96\">对象的属性描述符获取</a></li>\n<li><a href=\"#%E5%87%BD%E6%95%B0%E5%8F%82%E6%95%B0%E5%88%97%E8%A1%A8%E5%92%8C%E8%B0%83%E7%94%A8%E4%B8%AD%E7%9A%84%E5%B0%BE%E9%80%97%E5%8F%B7\">函数参数列表和调用中的尾逗号</a></li>\n<li><a href=\"#%E5%BC%82%E6%AD%A5%E5%87%BD%E6%95%B0\">异步函数</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>","id":"486eec72-5131-5b78-aa50-d364190bd398"}},"pageContext":{"slug":"/javascript/ES6基本用法2/","sourceInstanceName":"blog"}},"staticQueryHashes":["3159585216","3810076356"]}